System.register(['@angular/core'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1;
    var SoapService;
    return {
        setters:[
            function (core_1_1) {
                core_1 = core_1_1;
            }],
        execute: function() {
            convert = xdom2jso.convert;
            SoapService = (function () {
                function SoapService(servicePort, servicePath, targetNamespace) {
                    this.debug = false;
                    this.asynchronous = true;
                    this.localName = false;
                    this.servicePort = '';
                    this.servicePath = '';
                    this.serviceUrl = '';
                    this.targetNamespace = '';
                    this.envelopeBuilder_ = null;
                    this.xmlResponseHandler_ = null;
                    this.jsoResponseHandler_ = null;
                    this.servicePort = servicePort;
                    this.servicePath = servicePath;
                    this.serviceUrl = servicePort + servicePath;
                    if (undefined !== targetNamespace)
                        this.targetNamespace = targetNamespace;
                }
                Object.defineProperty(SoapService.prototype, "envelopeBuilder", {
                    set: function (envelopeBuilder) {
                        this.envelopeBuilder_ = envelopeBuilder;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SoapService.prototype, "jsoResponseHandler", {
                    set: function (responseHandler) {
                        this.jsoResponseHandler_ = responseHandler;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SoapService.prototype, "xmlResponseHandler", {
                    set: function (responseHandler) {
                        this.xmlResponseHandler_ = responseHandler;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SoapService.prototype, "localNameMode", {
                    set: function (on) {
                        this.localName = on;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SoapService.prototype, "debugMode", {
                    set: function (on) {
                        this.debug = on;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SoapService.prototype, "testMode", {
                    set: function (on) {
                        this.debug = on;
                        this.asynchronous = !on;
                    },
                    enumerable: true,
                    configurable: true
                });
                SoapService.prototype.post = function (method, parameters, responseRoot) {
                    var _this = this;
                    var request = this.toXml(parameters);
                    var envelopedRequest = null != this.envelopeBuilder_ ? this.envelopeBuilder_(request) : request;
                    if (this.debug) {
                        console.log('target namespace: ' + this.targetNamespace);
                        console.log('method: ' + method);
                        console.log('service URL: ' + this.serviceUrl);
                        console.log('request: ' + request);
                        console.log('envelopedRequest: ' + envelopedRequest);
                        console.log((this.asynchronous ? 'asynchronous' : 'synchronous') + ' ' + (this.localName ? 'without namespaces' : 'with namespaces (if returned by the webservice)'));
                    }
                    var xmlHttp = new XMLHttpRequest();
                    xmlHttp.onreadystatechange = function () {
                        if (_this.debug) {
                            console.log('XMLHttpRequest ready state: ' + xmlHttp.readyState);
                        }
                        if (4 == xmlHttp.readyState) {
                            if (_this.debug) {
                                console.log('XMLHttpRequest status: ' + xmlHttp.status);
                                console.log('XMLHttpRequest status text: ' + xmlHttp.statusText);
                                console.log('XMLHttpRequest response headers: ' + xmlHttp.getAllResponseHeaders());
                            }
                            var responseNodeList;
                            if (undefined === responseRoot) {
                                responseNodeList = xmlHttp.responseXML;
                            }
                            else {
                                responseNodeList = xmlHttp.responseXML.getElementsByTagNameNS('*', responseRoot);
                            }
                            if (null != _this.xmlResponseHandler_) {
                                _this.xmlResponseHandler_(responseNodeList);
                            }
                            if (null != _this.jsoResponseHandler_) {
                                var response = convert(responseNodeList[0], _this.localName);
                                if (_this.debug) {
                                    console.log(JSON.stringify(response));
                                }
                                _this.jsoResponseHandler_(response);
                            }
                        }
                    };
                    xmlHttp.open("POST", this.serviceUrl, this.asynchronous);
                    xmlHttp.setRequestHeader("SOAPAction", this.targetNamespace + '/' + encodeURIComponent(method));
                    xmlHttp.setRequestHeader("Content-Type", "text/xml; charset=utf-8");
                    xmlHttp.send(envelopedRequest);
                };
                SoapService.prototype.toXml = function (parameters) {
                    var xml = "";
                    var parameter;
                    switch (typeof (parameters)) {
                        case "string":
                            xml += parameters.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                            break;
                        case "number":
                        case "boolean":
                            xml += parameters.toString();
                            break;
                        case "object":
                            if (parameters.constructor.toString().indexOf("function Date()") > -1) {
                                var year = parameters.getFullYear().toString();
                                var month = ("0" + (parameters.getMonth() + 1).toString()).slice(-2);
                                var date = ("0" + parameters.getDate().toString()).slice(-2);
                                var hours = ("0" + parameters.getHours().toString()).slice(-2);
                                var minutes = ("0" + parameters.getMinutes().toString()).slice(-2);
                                var seconds = ("0" + parameters.getSeconds().toString()).slice(-2);
                                var milliseconds = parameters.getMilliseconds().toString();
                                var tzOffsetMinutes = Math.abs(parameters.getTimezoneOffset());
                                var tzOffsetHours = 0;
                                while (tzOffsetMinutes >= 60) {
                                    tzOffsetHours++;
                                    tzOffsetMinutes -= 60;
                                }
                                var tzMinutes = ("0" + tzOffsetMinutes.toString()).slice(-2);
                                var tzHours = ("0" + tzOffsetHours.toString()).slice(-2);
                                var timezone = ((parameters.getTimezoneOffset() < 0) ? "-" : "+") + tzHours + ":" + tzMinutes;
                                xml += year + "-" + month + "-" + date + "T" + hours + ":" + minutes + ":" + seconds + "." + milliseconds + timezone;
                            }
                            else if (parameters.constructor.toString().indexOf("function Array()") > -1) {
                                for (parameter in parameters) {
                                    if (parameters.hasOwnProperty(parameter)) {
                                        if (!isNaN(parameter)) {
                                            (/function\s+(\w*)\s*\(/ig).exec(parameters[parameter].constructor.toString());
                                            var type = RegExp.$1;
                                            switch (type) {
                                                case "":
                                                    type = typeof (parameters[parameter]);
                                                    break;
                                                case "String":
                                                    type = "string";
                                                    break;
                                                case "Number":
                                                    type = "int";
                                                    break;
                                                case "Boolean":
                                                    type = "bool";
                                                    break;
                                                case "Date":
                                                    type = "DateTime";
                                                    break;
                                            }
                                            xml += this.toElement(type, parameters[parameter]);
                                        }
                                        else {
                                            xml += this.toElement(parameter, parameters[parameter]);
                                        }
                                    }
                                }
                            }
                            else {
                                for (parameter in parameters) {
                                    if (parameters.hasOwnProperty(parameter)) {
                                        xml += this.toElement(parameter, parameters[parameter]);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new Error("SoapService error: type '" + typeof (parameters) + "' is not supported");
                    }
                    return xml;
                };
                SoapService.prototype.toElement = function (tagNamePotentiallyWithAttributes, parameters) {
                    var elementContent = this.toXml(parameters);
                    if ("" == elementContent) {
                        return "<" + tagNamePotentiallyWithAttributes + "/>";
                    }
                    else {
                        return "<" + tagNamePotentiallyWithAttributes + ">" + elementContent + "</" + SoapService.stripTagAttributes(tagNamePotentiallyWithAttributes) + ">";
                    }
                };
                SoapService.stripTagAttributes = function (tagNamePotentiallyWithAttributes) {
                    tagNamePotentiallyWithAttributes = tagNamePotentiallyWithAttributes + ' ';
                    return tagNamePotentiallyWithAttributes.slice(0, tagNamePotentiallyWithAttributes.indexOf(' '));
                };
                SoapService = __decorate([
                    core_1.Injectable(), 
                    __metadata('design:paramtypes', [String, String, String])
                ], SoapService);
                return SoapService;
            }());
            exports_1("SoapService", SoapService);
        }
    }
});
//# sourceMappingURL=soap.service.js.map